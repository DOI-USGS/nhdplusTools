[{"path":"/articles/nhdplushr.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TL;DR;","title":"Working with NHDPlusHR","text":"functions nhdplusTools work NHDPlus High Res (HR) medium res. demo shows get single four-digit hydrologic unit worth HR data, index point , subset , plot results. Note: consistency, identifiers NHDPlusV2 used HiRes data. future release nhdplusTools may alter behavior.  Now four digit hydrologic unit worth NHDPlusHR data subset upstream point interest, can plot things see looks like. plot uses NHDPlusV2 returned plot_nhdplus() base layer adds NHDPlusHR data top .","code":"library(nhdplusTools) library(sf) #> Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1  work_dir <- file.path(nhdplusTools_data_dir(), \"hr_v_cache\")  source(system.file(\"extdata/sample_data.R\", package = \"nhdplusTools\"))  hr_gpkg <- file.path(work_dir, \"hr_data.gpkg\")  # Make a plot and get some background NHDPlusV2 data. plot_data <- plot_nhdplus(list(\"nwissite\", \"USGS-05428500\"), streamorder = 3,                           nhdplus_data = sample_data,                           stoponlargerequest = FALSE) #> Zoom: 10 #> Map tiles by Carto, under CC BY 3.0. Data by OpenStreetMap, under ODbL. #> Audotdetect projection: assuming Google Mercator (epsg 3857) # Find the HU04 we are interested in. hu04 <- unique(substr(plot_data$flowline$REACHCODE, 1, 4))  # Download some NHDPlusHR Data hr_data_dir <- download_nhdplushr(work_dir, hu04)  # Projection and simplification for demo purposes. hr <- get_nhdplushr(work_dir, out_gpkg = hr_gpkg,                     proj = 3857)  (start_index <- get_flowline_index(st_transform(hr$NHDFlowline, 5070),                                    st_transform(plot_data$outlets, 5070),                                    search_radius = 200)) # meters albers eq area #> # A tibble: 1 x 5 #>      id   COMID REACHCODE      REACH_meas offset #>   <int>   <dbl> <chr>               <dbl>  <dbl> #> 1     1 2.20e13 07090002006114       37.7   87.7  ids <- get_UT(hr$NHDFlowline, start_index$COMID)  hr_subset <- subset_nhdplus(ids, nhdplus_data = hr_gpkg) #> All intersections performed in latitude/longitude. #> Reading NHDFlowline #> 366 comids of 366 #> Writing NHDFlowline #> Reading NHDPlusCatchment #> 366 comids of 366 #> Found invalid geometry, attempting to fix. #> Writing NHDPlusCatchment plot_nhdplus(list(\"nwissite\", \"USGS-05428500\"), streamorder = 2,               nhdplus_data = sample_data, overwrite = TRUE,              plot_config = list(flowline = list(lwd = 2.5),                                 basin = list(lwd = 3)),              stoponlargerequest = FALSE) #> Zoom: 10 #> Map tiles by Carto, under CC BY 3.0. Data by OpenStreetMap, under ODbL. #> Audotdetect projection: assuming Google Mercator (epsg 3857)  plot(st_geometry(hr$NHDPlusCatchment), lwd = 0.25, add = TRUE) plot(st_geometry(hr$NHDFlowline), col = \"blue\", lwd = 0.5, add = TRUE)  plot(st_geometry(st_transform(hr_subset$NHDFlowline, 3857)),      col = \"cyan\", lwd = 1, add = TRUE)"},{"path":"/articles/nhdplushr.html","id":"download","dir":"Articles","previous_headings":"","what":"Download","title":"Working with NHDPlusHR","text":"NHDPlusHR support nhdplusTools begins function download_nhdplushr(). NHDPlusHR can downloaded four digit hydrologic unit code subsets . download_nhdplushr() facilitates downloading subsets many need. takes directory want save output vector four digit (HU04) two digit (HU02) hydrologic units. also option just return URLs data downloaded use process. Since TL;DR; already downloaded data. code shows just get URLs whole HU02 output looks like disk. Note: Data HU02 put output folder.","code":"(hr_urls <- download_nhdplushr(work_dir, \"06\", download_files = FALSE)) #> [1] \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHDPlusHR/Beta/GDB/NHDPLUS_H_0601_HU4_GDB.zip\" #> [2] \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHDPlusHR/Beta/GDB/NHDPLUS_H_0602_HU4_GDB.zip\" #> [3] \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHDPlusHR/Beta/GDB/NHDPLUS_H_0603_HU4_GDB.zip\" #> [4] \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHDPlusHR/Beta/GDB/NHDPLUS_H_0604_HU4_GDB.zip\"  # already downloaded: list.files(hr_data_dir) #> [1] \"NHDPLUS_H_0709_HU4_GDB.gdb\" \"NHDPLUS_H_0709_HU4_GDB.jpg\" #> [3] \"NHDPLUS_H_0709_HU4_GDB.xml\""},{"path":"/articles/nhdplushr.html","id":"basic-functionality","dir":"Articles","previous_headings":"","what":"Basic functionality","title":"Working with NHDPlusHR","text":"second part nhdplusTools support NHDPlusHR bit involved. entry point function called get_nhdplushr(). ’s core, take collection NHDPlusHR subsets, open one one build single output table later use. also 1. joins flowline attributes flowline geometry, 1. can return one selected layers, 1. can save result standalone geopackage later use, 1. can make attributes subset look like part standalone network rather references downstream data aren’t subset. Using data downloaded TL;DR; intro, code demonstrates behaviors get_nhdplushr() First, just give directory containing HR data, give us back list flowlines catchments sf data.frames.  want data, can get layer options listed get_nhdplushr() documentation.  Since function can work large amounts data don’t want keep running , option save results standalone database later use.","code":"hr <- get_nhdplushr(hr_data_dir) sapply(hr, class) #>      NHDFlowline  NHDPlusCatchment #> [1,] \"sf\"         \"sf\"             #> [2,] \"tbl_df\"     \"tbl_df\"         #> [3,] \"tbl\"        \"tbl\"            #> [4,] \"data.frame\" \"data.frame\" plot(st_geometry(hr$NHDFlowline), lwd = (hr$NHDFlowline$StreamOrde / 6)) hr <- get_nhdplushr(hr_data_dir, layers = c(\"NHDFlowline\", \"NHDWaterbody\", \"NHDArea\")) #> Warning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, : #> GDAL Message 1: organizePolygons() received a polygon with more than 100 parts. #> The processing may be really slow. You can skip the processing by setting #> METHOD=SKIP, or only make it analyze counter-clock wise parts by setting #> METHOD=ONLY_CCW if you can assume that the outline of holes is counter-clock #> wise defined sapply(hr, class) #>      NHDFlowline  NHDWaterbody NHDArea      #> [1,] \"sf\"         \"sf\"         \"sf\"         #> [2,] \"tbl_df\"     \"tbl_df\"     \"tbl_df\"     #> [3,] \"tbl\"        \"tbl\"        \"tbl\"        #> [4,] \"data.frame\" \"data.frame\" \"data.frame\" sapply(hr, nrow) #>  NHDFlowline NHDWaterbody      NHDArea  #>        34532        11444          499 plot(st_geometry(hr$NHDFlowline), lwd = (hr$NHDFlowline$StreamOrde / 6), col = \"blue\")  plot(c(st_geometry(hr$NHDWaterbody), st_geometry(hr$NHDArea)),       col = \"cyan\", border = \"cyan\", lwd = 0.25, add = TRUE) demo_gpkg <- file.path(work_dir, \"demo.gpkg\") hr <- get_nhdplushr(hr_data_dir, out_gpkg = demo_gpkg) st_layers(demo_gpkg) #> Driver: GPKG  #> Available layers: #>         layer_name     geometry_type features fields #> 1      NHDFlowline Multi Line String    34532     57 #> 2 NHDPlusCatchment     Multi Polygon    42300      7"},{"path":"/articles/nhdplushr.html","id":"hr-modification-and-filtering","dir":"Articles","previous_headings":"","what":"HR modification and filtering","title":"Working with NHDPlusHR","text":"Since NHDPlusHR data can large, get_nhdplushr() offers ability subset data using filter options. filters described manual page get_hr_data() utility function. 1. min_size_sqkm remove flowlines certain size threshold. 1. sim simplify geometry given tolerance using sf::st_simplify(). 1. proj project output desired projection. 1. keep_cols used specify attributes desired output. 1. rename controls whether output automatically renamed compatible nhdplusTools functions. Note: options operate flowline network.","code":"demo <- get_nhdplushr(hr_data_dir, layers = \"NHDFlowline\",                                 min_size_sqkm = 50) plot(st_geometry(demo$NHDFlowline),       lwd = demo$NHDFlowline$StreamOrde/4, col = \"blue\") demo <- get_nhdplushr(hr_data_dir, layers = \"NHDFlowline\",                        min_size_sqkm = 100,                        proj = \"+init=epsg:5070\", simp = 200,                       keep_cols = c(\"COMID\", \"StreamOrde\")) #> Warning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is #> deprecated. It might return a CRS with a non-EPSG compliant axis order. names(demo$NHDFlowline) #> [1] \"COMID\"      \"StreamOrde\" \"Shape\" plot(st_geometry(demo$NHDFlowline),       lwd = demo$NHDFlowline$StreamOrde/4, col = \"blue\")"},{"path":"/articles/nhdplushr.html","id":"make-standalone-basins","dir":"Articles","previous_headings":"","what":"Make Standalone Basins","title":"Working with NHDPlusHR","text":"NHDPlus data model shared identifiers can span large distances. example, “Level Path Identifier” identifies entire river headwater outlet using “hydrologic sequence identifier” outlet. Similarly, “Terminal Path Identifier” identifies entire basin using hydrologic sequence identifier terminal flowline (ocean inland sink). creating subsets NHDPlus data, many times, attributes can identify flowlines included subset. applications, problem, cases, advantageous adjust identifiers subset appears complete drainage basin true terminal outlet. make_standalone() accomplishes task. one one basis, may seam insignificant, workflows need work arbitrary subsets start basin outlets, functionality useful. little impact data applied default. example shows outlet modified. described documentation os make_standalone() related attributes upstream also fixed network intact use.","code":"demo <- get_nhdplushr(hr_data_dir, layers = \"NHDFlowline\",                      min_size_sqkm = 100, check_terminals = FALSE)  # Create a standalone basin with the results for comparison. standalone_demo <- make_standalone(demo$NHDFlowline)  demo_outlet <- dplyr::filter(demo$NHDFlowline, TotDASqKM == max(TotDASqKM))   standalone_demo_outlet <- dplyr::filter(standalone_demo, TotDASqKM == max(TotDASqKM))  broken_outlet <- dplyr::select(st_drop_geometry(demo_outlet),                                 Hydroseq, TerminalPa, TerminalFl, LevelPathI) fixed_outlet <- dplyr::select(st_drop_geometry(standalone_demo_outlet),                                Hydroseq, TerminalPa, TerminalFl, LevelPathI)  print(data.frame(broken_outlet)) #>         Hydroseq     TerminalPa TerminalFl     LevelPathI #> 1 22001000000414 22000100000212          0 22000300045683 print(data.frame(fixed_outlet)) #>         Hydroseq     TerminalPa TerminalFl     LevelPathI #> 1 22001000000414 22001000000414          1 22001000000414  (broken <- dplyr::filter(demo$NHDFlowline, TerminalPa == demo_outlet$Hydroseq)) #> Simple feature collection with 0 features and 57 fields #> Bounding box:  xmin: NA ymin: NA xmax: NA ymax: NA #> Geodetic CRS:  NAD83 #> # A tibble: 0 x 58 #> # ... with 58 variables: Permanent_Identifier <chr>, FDate <dttm>, #> #   Resolution <int>, GNIS_ID <chr>, GNIS_Name <chr>, LENGTHKM <dbl>, #> #   REACHCODE <chr>, FlowDir <int>, WBArea_Permanent_Identifier <chr>, #> #   FTYPE <int>, FCODE <int>, MainPath <int>, InNetwork <int>, #> #   VisibilityFilter <int>, Shape_Length <dbl>, COMID <dbl>, VPUID <chr>, #> #   Enabled <int>, Shape <GEOMETRY [°]>, StreamLeve <int>, StreamOrde <int>, #> #   StreamCalc <int>, FromNode <dbl>, ToNode <dbl>, Hydroseq <dbl>, #> #   LevelPathI <dbl>, Pathlength <dbl>, TerminalPa <dbl>, ArbolateSu <dbl>, #> #   Divergence <int>, StartFlag <int>, TerminalFl <int>, UpLevelPat <dbl>, #> #   UpHydroSeq <dbl>, DnLevel <int>, DnLevelPat <dbl>, DnHydroseq <dbl>, #> #   DnMinorHyd <dbl>, DnDrainCou <int>, FromMeas <dbl>, ToMeas <dbl>, #> #   RtnDiv <int>, Thinner <int>, VPUIn <int>, VPUOut <int>, AreaSqKM <dbl>, #> #   TotDASqKM <dbl>, DivDASqKm <dbl>, MaxElevRaw <dbl>, MinElevRaw <dbl>, #> #   MaxElevSmo <dbl>, MinElevSmo <dbl>, Slope <dbl>, SlopeLenKm <dbl>, #> #   ElevFixed <int>, HWType <int>, HWNodeSqKm <dbl>, StatusFlag <chr> (standalone <- dplyr::filter(standalone_demo, TerminalPa == standalone_demo_outlet$Hydroseq)) #> Simple feature collection with 5358 features and 57 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: -90.68076 ymin: 41.27482 xmax: -88.1999 ymax: 43.74949 #> Geodetic CRS:  NAD83 #> # A tibble: 5,358 x 58 #>    Permanent_Identi~ FDate               Resolution GNIS_ID GNIS_Name   LENGTHKM #>  * <chr>             <dttm>                   <int> <chr>   <chr>          <dbl> #>  1 156038282         2012-03-19 01:32:25          2 004155~ Pecatonica~    1.34  #>  2 155714162         2014-10-28 19:00:00          2 004248~ Fairfield ~    0.417 #>  3 156035374         2012-03-19 01:35:08          2 015619~ Gordon Cre~    0.39  #>  4 145600320         2012-03-19 01:34:47          2 004168~ Rock Creek     0.352 #>  5 155712981         2012-03-19 02:05:43          2 <NA>    <NA>           0.034 #>  6 137417698         2012-03-18 13:07:30          2 015750~ Sugar River    0.798 #>  7 156037500         2012-03-19 01:33:10          2 <NA>    <NA>           0.009 #>  8 145599800         2012-03-19 01:34:47          2 004145~ North Fork~    0.665 #>  9 143246785         2012-03-18 12:56:42          2 004168~ Rock River     0.165 #> 10 155712415         2012-03-19 02:05:51          2 004241~ Willow Cre~    2.11  #> # ... with 5,348 more rows, and 52 more variables: REACHCODE <chr>, #> #   FlowDir <int>, WBArea_Permanent_Identifier <chr>, FTYPE <int>, FCODE <int>, #> #   MainPath <int>, InNetwork <int>, VisibilityFilter <int>, #> #   Shape_Length <dbl>, COMID <dbl>, VPUID <chr>, Enabled <int>, #> #   Shape <MULTILINESTRING [°]>, StreamLeve <int>, StreamOrde <int>, #> #   StreamCalc <int>, FromNode <dbl>, ToNode <dbl>, Hydroseq <dbl>, #> #   LevelPathI <dbl>, Pathlength <dbl>, TerminalPa <dbl>, ArbolateSu <dbl>, #> #   Divergence <int>, StartFlag <int>, TerminalFl <dbl>, UpLevelPat <dbl>, #> #   UpHydroSeq <dbl>, DnLevel <dbl>, DnLevelPat <dbl>, DnHydroseq <dbl>, #> #   DnMinorHyd <dbl>, DnDrainCou <int>, FromMeas <dbl>, ToMeas <dbl>, #> #   RtnDiv <int>, Thinner <int>, VPUIn <int>, VPUOut <int>, AreaSqKM <dbl>, #> #   TotDASqKM <dbl>, DivDASqKm <dbl>, MaxElevRaw <dbl>, MinElevRaw <dbl>, #> #   MaxElevSmo <dbl>, MinElevSmo <dbl>, Slope <dbl>, SlopeLenKm <dbl>, #> #   ElevFixed <int>, HWType <int>, HWNodeSqKm <dbl>, StatusFlag <chr>  plot(st_geometry(standalone))"},{"path":"/articles/nhdplusTools.html","id":"tldr","dir":"Articles","previous_headings":"","what":"TL;DR","title":"Introduction to nhdplusTools","text":"First, pick outlet location download data.  Read see NHDPlusTools help index data network just retrieved refactor (split, collapse, aggregate) catchments different set catchments. Please consider registering issues feature suggestions github.","code":"# Uncomment to install! # install.packages(\"nhdplusTools\")  library(nhdplusTools) library(sf) #> Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1  start_point <- st_sfc(st_point(c(-89.362239, 43.090266)), crs = 4269) start_comid <- discover_nhdplus_id(start_point)  flowline <- navigate_nldi(list(featureSource = \"comid\",                                 featureID = start_comid),                            mode = \"upstreamTributaries\",                            distance_km = 1000)  subset_file <- tempfile(fileext = \".gpkg\") subset <- subset_nhdplus(comids = flowline$UT$nhdplus_comid,                          output_file = subset_file,                          nhdplus_data = \"download\",                           flowline_only = FALSE,                          return_data = TRUE, overwrite = TRUE) #> All intersections performed in latitude/longitude. #> Reading NHDFlowline_Network #> Found invalid geometry, attempting to fix. #> Writing NHDFlowline_Network #> Reading CatchmentSP #> Writing CatchmentSP #> Found invalid geometry, attempting to fix. #> Found invalid geometry, attempting to fix. #> Found invalid geometry, attempting to fix.  flowline <- subset$NHDFlowline_Network catchment <- subset$CatchmentSP waterbody <- subset$NHDWaterbody  ## Or:  flowline <- sf::read_sf(subset_file, \"NHDFlowline_Network\") catchment <- sf::read_sf(subset_file, \"CatchmentSP\") waterbody <- sf::read_sf(subset_file, \"NHDWaterbody\")  plot(sf::st_geometry(flowline), col = \"blue\") plot(start_point, cex = 1.5, lwd = 2, col = \"red\", add = TRUE) plot(sf::st_geometry(catchment), add = TRUE) plot(sf::st_geometry(waterbody), col = rgb(0, 0, 1, alpha = 0.5), add = TRUE)"},{"path":"/articles/nhdplusTools.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to nhdplusTools","text":"nhdplusTools package intended provide reusable set tools subset, relate data , refactor (collapse, split, aggregate) NHDPlus data. implements data model consistent NHDPlus HY_Features. package aims provide set tools minimal dependencies can used build workflows using NHDPlus data. package three types functionality: Discovery Subsetting Indexing Referencing Generalization Refactoring introduction gives overview basic package setup brief demonstration three types functionality. Detailed documentation package functions can found Referece page","code":""},{"path":"/articles/nhdplusTools.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to nhdplusTools","text":"easiest way install nhdplusTools devtools package like : can load nhdplusTools:","code":"# install.packages(\"devtools\") # devtools::install_github(\"usgs-r/nhdplusTools\") library(nhdplusTools)"},{"path":"/articles/nhdplusTools.html","id":"data-and-package-basics","dir":"Articles","previous_headings":"","what":"Data and Package Basics","title":"Introduction to nhdplusTools","text":"first thing going need go get data work . nhdplusTools provides ability download small subsets NHDPlus described Discovery Subsetting section. large subsets, greater thousand square kilometers, can download National Seamless database web page. need 7z archive package extract . working whole National Seamless database, nhdplusTools convenience functions aware . downloaded extracted, can tell nhdplusTools package nhdplus_path() function. going loading reloading flowlines, flowline attributes, catchments, repeatedly, stage_national_data() function speed things bit. creates three staged files quicker R read path tell . call output files exist, won’t overwrite just return paths staged files. can see, stage_national_data() assumes want stage data folder nhdplus_path database returns list .rds files can read readRDS. flowlines catchments sf data.frames attributes plain data.frame attributes flowline. Note introduction uses small subset national seamless database shown plot.","code":"nhdplus_path(file.path(work_dir, \"natseamless.gpkg\"))  nhdplus_path() #> [1] \"C:\\\\Users\\\\dblodgett\\\\AppData\\\\Roaming/R/data/R/usgs_r/nhdplusTools/nhdpt_v_cache/natseamless.gpkg\" staged_data <- stage_national_data(output_path = tempdir())  str(staged_data) #> List of 3 #>  $ attributes: chr \"C:\\\\Users\\\\DBLODG~1\\\\AppData\\\\Local\\\\Temp\\\\1\\\\RtmpWy6mTY/nhdplus_flowline_attributes.rds\" #>  $ flowline  : chr \"C:\\\\Users\\\\DBLODG~1\\\\AppData\\\\Local\\\\Temp\\\\1\\\\RtmpWy6mTY/nhdplus_flowline.rds\" #>  $ catchment : chr \"C:\\\\Users\\\\DBLODG~1\\\\AppData\\\\Local\\\\Temp\\\\1\\\\RtmpWy6mTY/nhdplus_catchment.rds\" flowline <- readRDS(staged_data$flowline) names(flowline)[1:10] #>  [1] \"COMID\"      \"FDATE\"      \"RESOLUTION\" \"GNIS_ID\"    \"GNIS_NAME\"  #>  [6] \"LENGTHKM\"   \"REACHCODE\"  \"FLOWDIR\"    \"WBAREACOMI\" \"FTYPE\"  library(sf) plot(sf::st_geometry(flowline))"},{"path":"/articles/nhdplusTools.html","id":"nhdplus-hires","dir":"Articles","previous_headings":"Data and Package Basics","what":"NHDPlus HiRes","title":"Introduction to nhdplusTools","text":"(6/16/2019) NHDPlus HiRes -development dataset introduces much dense flowlines catchments. long run, nhdplusTools complete support NHDPlus HiRes. far, nhdplusTools help download interface NHDPlus HiRes data existing nhdplusTools functionality. ’s important note nhdplusTools primarily implemented using NHDPlusV2 use HiRes (still “beta data” writing ) subject significant scrutiny. Never less, ’s short summary work NHDPlus HiRes. demo , small sample HiRes data loaded nhdplusTools used. first line shows can download additional data (just change download_files TRUE). functionality package, get_UT/UM/DM/DD functions, subsetting, indexing, etc. also work now soon! Stay tuned dedicated NHDPlus HiRes vignette submit issues find !","code":"download_nhdplushr(nhd_dir = \"download_dir\",                     hu_list = c(\"0101\"), # can mix hu02 and hu04 codes.                    download_files = FALSE) # TRUE will download files. #> [1] \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHDPlusHR/Beta/GDB/NHDPLUS_H_0101_HU4_GDB.zip\"  out_gpkg <- file.path(work_dir, \"nhd_hr.gpkg\") hr_data <- get_nhdplushr(work_dir,                           out_gpkg = out_gpkg) (layers <- st_layers(out_gpkg)) #> Driver: GPKG  #> Available layers: #>         layer_name geometry_type features fields #> 1      NHDFlowline   Line String     2691     57 #> 2 NHDPlusCatchment Multi Polygon     2603      7 names(hr_data) #> [1] \"NHDFlowline\"      \"NHDPlusCatchment\" unlink(out_gpkg)  hr_data <- get_nhdplushr(work_dir,                           out_gpkg = out_gpkg,                           layers = NULL) (layers <- st_layers(out_gpkg)) #> Driver: GPKG  #> Available layers: #>         layer_name geometry_type features fields #> 1      NHDFlowline   Line String     2691     57 #> 2 NHDPlusCatchment Multi Polygon     2603      7 #> 3     NHDWaterbody       Polygon     1044     15 #> 4          NHDArea       Polygon       10     14 #> 5          NHDLine   Line String      142     12 #> 6      NHDPlusSink         Point        1     10 #> 7         NHDPoint      3D Point        7     10 names(hr_data) #> [1] \"NHDFlowline\"      \"NHDPlusCatchment\" \"NHDWaterbody\"     \"NHDArea\"          #> [5] \"NHDLine\"          \"NHDPlusSink\"      \"NHDPoint\""},{"path":"/articles/nhdplusTools.html","id":"discovery-and-subsetting","dir":"Articles","previous_headings":"","what":"Discovery and Subsetting","title":"Introduction to nhdplusTools","text":"One primary workflows nhdplusTools designed accomplish can described three steps: NHDPlus catchment outlet watershed, figure catchments downstream catchment, create stand alone subset collection catchments. Say want get subset NHDPlus upstream given location. can start discover_nhdplus_id() First, let’s look given point location. see relative flowlines.  OK, point location near river want figure catchment outlet. can use discover_nhdplus_id() function calls web service returns NHDPlus catchment identifier, typically called COMID. whole National Seamless database want work regional national scales, skip Local Data Subsetting section.","code":"lon <- -89.362239 lat <- 43.090266  start_point <- sf::st_sfc(sf::st_point(c(lon, lat)),                           crs = 4269)  plot(sf::st_geometry(flowline)) plot(start_point, cex = 1.5, lwd = 2, col = \"red\", add = TRUE) start_comid <- discover_nhdplus_id(start_point) start_comid #> [1] 13293750"},{"path":"/articles/nhdplusTools.html","id":"web-service-data-subsetting","dir":"Articles","previous_headings":"Discovery and Subsetting","what":"Web Service Data Subsetting","title":"Introduction to nhdplusTools","text":"nhdplusTools supports discovery data subsetting using web services made available Network Linked Data Index (NLDI) National Water Census Geoserver. code shows use NLDI functions build dataset upstream start_comid found . NLDI can queried set watershed outlet locations index. call “featureSources”. can query NLDI identifier given feature “featureSources” find navigation options shown . can use get_nldi_feature() way make sure featureID available chosen “featureSource”. Now know NLDI comid, can use “upstreamTributaries” navigation option get flowlines upstream features “featureSources” shown .  shown NLDI provided geometry comid flowlines. subset_nhdplus function “download” option allows us download four layers attributes shown .  plot illustrates kind thing ’s possible (filtering specific stream orders) using attributes downloaded. Notice data downloaded four layers subset build . functionality considered beta nature, may useful applications included. moving , one demonstration can done using NLDI. Say knew USGS gage ID want NHDPlus data upstream . can use NLDI navigate gage comid. can also get back nwis sites NLDI knows upstream one chose!","code":"dataRetrieval::get_nldi_sources()$source #> [1] \"comid\"      \"ca_gages\"   \"gfv11_pois\" \"huc12pp\"    \"nwissite\"   #> [6] \"ref_gage\"   \"wade\"       \"WQP\"  nldi_feature <- list(featureSource = \"comid\", featureID = start_comid)  get_nldi_feature(nldi_feature) #> Simple feature collection with 1 feature and 3 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -89.37037 ymin: 43.08521 xmax: -89.35393 ymax: 43.09491 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 x 4 #>   sourceName   identifier comid                                         geometry #>   <chr>        <chr>      <chr>                                 <LINESTRING [°]> #> 1 NHDPlus com~ 13293750   13293~ (-89.37037 43.09491, -89.36997 43.09475, -89.3~ flowline_nldi <- navigate_nldi(nldi_feature,                                 mode = \"upstreamTributaries\",                                 distance_km = 1000)  plot(sf::st_geometry(flowline), lwd = 3, col = \"black\") plot(sf::st_geometry(flowline_nldi$origin), lwd = 3, col = \"red\", add = TRUE) plot(sf::st_geometry(flowline_nldi$UT), lwd = 1, col = \"red\", add = TRUE) output_file_download <- file.path(work_dir, \"subset_download.gpkg\")  output_file_download <-subset_nhdplus(comids = flowline_nldi$UT$nhdplus_comid,                                       output_file = output_file_download,                                       nhdplus_data = \"download\", return_data = FALSE,                                       overwrite = TRUE) #> All intersections performed in latitude/longitude. #> Reading NHDFlowline_Network #> Found invalid geometry, attempting to fix. #> Writing NHDFlowline_Network  sf::st_layers(output_file_download) #> Driver: GPKG  #> Available layers: #>            layer_name geometry_type features fields #> 1 NHDFlowline_Network   Line String      168    138  flowline_download <- sf::read_sf(file.path(work_dir, \"subset_download.gpkg\"),                                   \"NHDFlowline_Network\")  plot(sf::st_geometry(dplyr::filter(flowline_download,                                     streamorde > 2)),       lwd = 7, col = \"darkgrey\") plot(sf::st_geometry(flowline_nldi$UT),       lwd = 3, col = \"red\", add = TRUE) nldi_feature <- list(featureSource = \"nwissite\", featureID = \"USGS-05428500\")  flowline_nldi <- navigate_nldi(nldi_feature,                                 mode = \"upstreamTributaries\",                                 distance_km = 1000)  output_file_nwis <- file.path(work_dir, \"subset_download_nwis.gpkg\")  output_file_nwis <-subset_nhdplus(comids = flowline_nldi$UT$nhdplus_comid,                                   output_file = output_file_nwis,                                   nhdplus_data = \"download\",                                   return_data = FALSE, overwrite = TRUE) #> All intersections performed in latitude/longitude. #> Reading NHDFlowline_Network #> Found invalid geometry, attempting to fix. #> Writing NHDFlowline_Network  sf::st_layers(output_file_download) #> Driver: GPKG  #> Available layers: #>            layer_name geometry_type features fields #> 1 NHDFlowline_Network   Line String      168    138  flowline_nwis <- sf::read_sf(output_file_nwis,                                   \"NHDFlowline_Network\")  upstream_nwis <- navigate_nldi(nldi_feature,                                mode = \"upstreamTributaries\",                                data_source = \"nwissite\",                                 distance_km = 1000)  plot(sf::st_geometry(flowline_nwis),       lwd = 3, col = \"blue\") plot(sf::st_geometry(upstream_nwis$UT_nwissite),       cex = 1, lwd = 2, col = \"red\", add = TRUE)"},{"path":"/articles/nhdplusTools.html","id":"local-data-subsetting","dir":"Articles","previous_headings":"Discovery and Subsetting","what":"Local Data Subsetting","title":"Introduction to nhdplusTools","text":"starting COMID found discover_nhdplus_id , can use one network navigation functions, get_UM, get_UT, get_DM, get_DD retrieve collection comids along upstream mainstem, upstream tributaries, downstream mainstem, downstream diversions network paths. ’ll use upstream tributaries. familiar NHDPlus, recognize now list COMIDs, go sorts things various flowline attributes. now, let’s just use COMID list filter fline sf data.frame plot layers.  Say want save network subset later use R GIS. `subset_nhdplus() function friend. whole national seamless database downloaded, can pull large subsets like shown . don’t whole national seamless, look second example section. Now output geopackage can used later. contains network subset catchments flowlines well spatial subset layers shown status output . complete demonstration, couple layers plotted .","code":"UT_comids <- get_UT(flowline, start_comid) UT_comids #>   [1]  13293750  13293504  13294134  13294128  13294394  13293454  13293430 #>   [8]  13293424  13294110  13293398  13293392  13293388  13293384  13293380 #>  [15]  13293576  13294288  13294284  13293506  13294280  13294290  13294298 #>  [22]  13294304  13294310  13294312  13293696  13293694  13294264  13293676 #>  [29]  13293620  13293612  13293584  13294166  13293554  13293540  13294282 #>  [36]  13293520  13293480  13294132  13293588  13293550  13293574  13293508 #>  [43]  13293530  13293526  13293524  13294138  13293496  13293488  13293484 #>  [50]  13293474  13294118  13293440  13293426  13293458  13294382  13294274 #>  [57]  13293422  13293416  13293390  13293382  13293386  13293376  13293396 #>  [64]  13293394  13293406  13293404  13294268  13294366  13293400  13293432 #>  [71]  13293452  13293456  13293492  13294158  13294286  13293634  13294368 #>  [78]  13294124 937090090 937090091  13293464  13293444  13293446  13293434 #>  [85]  13293542  13294154  13293536  13294292  13294294  13294300  13294308 #>  [92]  13294314  13294272  13294276  13294384  13294278  13294386  13293494 #>  [99]  13294130  13294306  13294184  13293690  13293692  13293586  13293614 #> [106]  13293624  13293678  13293672  13293674  13294176  13294168  13293578 #> [113]  13293564  13293548  13293478  13293476  13293450  13293442  13293518 #> [120]  13293472  13293572  13293568  13293556  13293558  13293552  13293514 #> [127]  13293522  13294144  13293532  13294150  13294148  13294140  13293516 #> [134]  13293502  13293498  13293460  13294122  13293468  13294112  13293512 #> [141]  13293486  13293378  13293462  13293428  13293420  13293412  13293438 #> [148]  13293490  13293436  13294152  13294296  13294270  13302588  13302590 #> [155]  13293688  13293646  13294174  13294178  13293562  13293600  13293448 #> [162]  13294116  13294120  13293570  13294114  13293418  13293410  13293590 plot(sf::st_geometry(flowline)) plot(start_point, cex = 1.5, lwd = 2, col = \"red\", add = TRUE) plot(sf::st_geometry(dplyr::filter(flowline, COMID %in% UT_comids)),      add=TRUE, col = \"red\", lwd = 2) output_file <- file.path(work_dir, \"subset.gpkg\")  output_file <-subset_nhdplus(comids = UT_comids,                              output_file = output_file,                              nhdplus_data = nhdplus_path(),                               return_data = FALSE, overwrite = TRUE) #> All intersections performed in latitude/longitude. #> Reading NHDFlowline_Network #> 168 comids of 168 #> Writing NHDFlowline_Network #> Reading CatchmentSP #> 168 comids of 168 #> Writing CatchmentSP #> Reading NHDArea #> Writing NHDArea #> Reading NHDWaterbody #> Writing NHDWaterbody #> Reading NHDFlowline_NonNetwork #> Writing NHDFlowline_NonNetwork #> Reading Gage #> Writing Gage #> Reading Sink #> No features to write in Sink  sf::st_layers(output_file) #> Driver: GPKG  #> Available layers: #>               layer_name geometry_type features fields #> 1    NHDFlowline_Network   Line String      168    136 #> 2            CatchmentSP       Polygon      167      6 #> 3                NHDArea       Polygon        1     14 #> 4           NHDWaterbody       Polygon       90     21 #> 5 NHDFlowline_NonNetwork   Line String       45     12 #> 6                   Gage         Point       33     19 catchment <- sf::read_sf(output_file, \"CatchmentSP\") waterbody <- sf::read_sf(output_file, \"NHDWaterbody\")  plot(sf::st_geometry(flowline)) plot(start_point, cex = 1.5, lwd = 2, col = \"red\", add = TRUE) plot(sf::st_geometry(dplyr::filter(flowline, COMID %in% UT_comids)),      add=TRUE, col = \"red\", lwd = 2) plot(sf::st_geometry(catchment), add = TRUE) plot(sf::st_geometry(waterbody), col = rgb(0, 0, 1, alpha = 0.5), add = TRUE)"},{"path":"/articles/nhdplusTools.html","id":"indexing","dir":"Articles","previous_headings":"","what":"Indexing","title":"Introduction to nhdplusTools","text":"Expect space nhdplustTools progresses. Right now, one indexing method implemented. Using data , can use get_flowline_index() function get comid, reachcode, measure starting point like . get_flowline_index() work list points . demonstration purposes, can use gages subset . info get_flowline_index() see article vignette(\"point_indexing\") reference page describes .","code":"get_flowline_index(flowline, start_point) #> Warning in get_flowline_index(flowline, start_point): crs of lines and points #> don't match. attempting st_transform of points #> # A tibble: 1 x 5 #>      id    COMID REACHCODE      REACH_meas   offset #>   <int>    <int> <chr>               <dbl>    <dbl> #> 1     1 13293750 07090002007373       53.1 0.000421 gage <- sf::read_sf(output_file, \"Gage\")  get_flowline_index(flowline, sf::st_geometry(gage), precision = 10) #> Warning in get_flowline_index(flowline, sf::st_geometry(gage), precision = 10): #> crs of lines and points don't match. attempting st_transform of points #> # A tibble: 33 x 5 #>       id    COMID REACHCODE      REACH_meas     offset #>    <int>    <int> <chr>               <dbl>      <dbl> #>  1     1 13293744 07090002007743     29.3   0.0000160  #>  2     2 13294276 07090002008387     14.8   0.0000123  #>  3     3 13294264 07090002007650     56.4   0.0000209  #>  4     4 13293750 07090002007373     42.5   0.0000253  #>  5     5 13294312 07090002008383      1.22  0.00000298 #>  6     6 13294264 07090002007650     41.1   0.0000331  #>  7     7 13294264 07090002007650      2.09  0.00000226 #>  8     8 13293688 07090002007660    100     0.0209     #>  9     9 13294300 07090002008379     85.4   0.0000161  #> 10    10 13293690 07090002007648      0.764 0.0000140  #> # ... with 23 more rows"},{"path":"/articles/nhdplusTools.html","id":"refactoring","dir":"Articles","previous_headings":"","what":"Refactoring","title":"Introduction to nhdplusTools","text":"NHDPlus tools package developed support experimental NHDPlus refactoring workflow normalize size catchments resolve particular network locations. work interest, can found .","code":""},{"path":"/articles/plot_nhdplus.html","id":"plotting-with-nhdplustools","dir":"Articles","previous_headings":"","what":"Plotting with nhdplusTools","title":"Plotting with nhdplusTools","text":"goal vignette demonstrate simple lightweight approach building maps NHDPlus data.","code":""},{"path":"/articles/plot_nhdplus.html","id":"the-plot_nhdplus-function","dir":"Articles","previous_headings":"","what":"The plot_nhdplus function","title":"Plotting with nhdplusTools","text":"plot_nhdplus work progress. inputs function implemented 11/18/2019 additional functionality added later. Please leave feature requests issues find issue . plot_nhdplus function makes getting simple plot NHDPlus data easy possible. works functions nhdplusTools identifying retrieving watershed outlet locations. See plot_nhdplus documentation info. pass plot_nhdplus single NWIS site id, nhdplusTools uses web services get data get plot like :  want add watersheds, can use outlet available Network Linked Data Index. See “nldi” functions elsewhere nhdplusTools.   don’t know site id, can just pass one latitude / longitude locations.  plot_nhdplus also allows modification streamorder (data available locally) styles. plot request shows get subset data plot range options. See documentation details.  can also plot NHDPlus data without outlet .  plots EPSG:3857 projection compatible background tiles. data added plots must projected coordinate system added plot.","code":"plot_nhdplus(\"05428500\") plot_nhdplus(list(list(\"nwissite\", \"USGS-05428500\"),                   list(\"huc12pp\", \"070900020602\"))) plot_nhdplus(list(list(\"nwissite\", \"USGS-05428500\"),                   list(\"huc12pp\", \"070900020602\"))) start_point <- sf::st_as_sf(data.frame(x = -89.36, y = 43.09),                              coords = c(\"x\", \"y\"), crs = 4326)  plot_nhdplus(start_point) source(system.file(\"extdata/sample_data.R\", package = \"nhdplusTools\"))  plot_nhdplus(list(list(\"comid\", \"13293970\"),                   list(\"nwissite\", \"USGS-05428500\"),                   list(\"huc12pp\", \"070900020603\"),                   list(\"huc12pp\", \"070900020602\")),              streamorder = 2,              nhdplus_data = sample_data,              plot_config = list(basin = list(lwd = 2),                                 outlets = list(huc12pp = list(cex = 1.5),                                                comid = list(col = \"green\"))),              stoponlargerequest = FALSE) bbox <- sf::st_bbox(c(xmin = -89.56684, ymin = 42.99816, xmax = -89.24681, ymax = 43.17192),                     crs = \"+proj=longlat +datum=WGS84 +no_defs\") plot_nhdplus(bbox = bbox)"},{"path":"/articles/plot_nhdplus.html","id":"getting-data","dir":"Articles","previous_headings":"","what":"Getting Data","title":"Plotting with nhdplusTools","text":"follows shows use nhdplusTools create plots without plot_nhdplus function. super convenient, know “easy button” never quite right, description help get started. example, ’ll start outlet NWIS Site. Note options possible discover_nhdplus_id dataRetrieval::get_nldi_sources. Now file path held variable nhdplus three sf data.frames contents look like: file four layers: network flowlines, simplified catchments, nhd area features, nhd waterbody features. flowlines large set attributes NHDPlus dataset. nwis sites attributes came NLDI. Attributes NWIS sites can found using dataRetrieval package. See NHDPlus user guide linked layers flowline attributes entail.","code":"library(sf) #> Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1 library(nhdplusTools) nwissite <- list(featureSource = \"nwissite\",                       featureID = \"USGS-05428500\")  flowline <- navigate_nldi(nwissite,                            mode = \"upstreamTributaries\",                            data_source = \"flowlines\")  nhdplus <- subset_nhdplus(comids = flowline$UT$nhdplus_comid,                           output_file = file.path(work_dir, \"nhdplus.gpkg\"),                           nhdplus_data = \"download\",                           overwrite = TRUE, return_data = FALSE) #> All intersections performed in latitude/longitude. #> Reading NHDFlowline_Network #> Writing NHDFlowline_Network  flowline <- read_sf(nhdplus, \"NHDFlowline_Network\")  upstream_nwis <- navigate_nldi(nwissite,                                mode = \"upstreamTributaries\",                                data_source = \"nwissite\")  basin <- get_nldi_basin(nwissite) st_layers(nhdplus) #> Driver: GPKG  #> Available layers: #>            layer_name geometry_type features fields #> 1 NHDFlowline_Network   Line String       10    138 names(flowline) #>   [1] \"id\"           \"comid\"        \"fdate\"        \"resolution\"   \"gnis_id\"      #>   [6] \"gnis_name\"    \"lengthkm\"     \"reachcode\"    \"flowdir\"      \"wbareacomi\"   #>  [11] \"ftype\"        \"fcode\"        \"shape_length\" \"streamleve\"   \"streamorde\"   #>  [16] \"streamcalc\"   \"fromnode\"     \"tonode\"       \"hydroseq\"     \"levelpathi\"   #>  [21] \"pathlength\"   \"terminalpa\"   \"arbolatesu\"   \"divergence\"   \"startflag\"    #>  [26] \"terminalfl\"   \"dnlevel\"      \"uplevelpat\"   \"uphydroseq\"   \"dnlevelpat\"   #>  [31] \"dnminorhyd\"   \"dndraincou\"   \"dnhydroseq\"   \"frommeas\"     \"tomeas\"       #>  [36] \"rtndiv\"       \"vpuin\"        \"vpuout\"       \"areasqkm\"     \"totdasqkm\"    #>  [41] \"divdasqkm\"    \"tidal\"        \"totma\"        \"wbareatype\"   \"pathtimema\"   #>  [46] \"hwnodesqkm\"   \"maxelevraw\"   \"minelevraw\"   \"maxelevsmo\"   \"minelevsmo\"   #>  [51] \"slope\"        \"elevfixed\"    \"hwtype\"       \"slopelenkm\"   \"qa_ma\"        #>  [56] \"va_ma\"        \"qc_ma\"        \"vc_ma\"        \"qe_ma\"        \"ve_ma\"        #>  [61] \"qa_01\"        \"va_01\"        \"qc_01\"        \"vc_01\"        \"qe_01\"        #>  [66] \"ve_01\"        \"qa_02\"        \"va_02\"        \"qc_02\"        \"vc_02\"        #>  [71] \"qe_02\"        \"ve_02\"        \"qa_03\"        \"va_03\"        \"qc_03\"        #>  [76] \"vc_03\"        \"qe_03\"        \"ve_03\"        \"qa_04\"        \"va_04\"        #>  [81] \"qc_04\"        \"vc_04\"        \"qe_04\"        \"ve_04\"        \"qa_05\"        #>  [86] \"va_05\"        \"qc_05\"        \"vc_05\"        \"qe_05\"        \"ve_05\"        #>  [91] \"qa_06\"        \"va_06\"        \"qc_06\"        \"vc_06\"        \"qe_06\"        #>  [96] \"ve_06\"        \"qa_07\"        \"va_07\"        \"qc_07\"        \"vc_07\"        #> [101] \"qe_07\"        \"ve_07\"        \"qa_08\"        \"va_08\"        \"qc_08\"        #> [106] \"vc_08\"        \"qe_08\"        \"ve_08\"        \"qa_09\"        \"va_09\"        #> [111] \"qc_09\"        \"vc_09\"        \"qe_09\"        \"ve_09\"        \"qa_10\"        #> [116] \"va_10\"        \"qc_10\"        \"vc_10\"        \"qe_10\"        \"ve_10\"        #> [121] \"qa_11\"        \"va_11\"        \"qc_11\"        \"vc_11\"        \"qe_11\"        #> [126] \"ve_11\"        \"qa_12\"        \"va_12\"        \"qc_12\"        \"vc_12\"        #> [131] \"qe_12\"        \"ve_12\"        \"lakefract\"    \"surfarea\"     \"rareahload\"   #> [136] \"rpuid\"        \"vpuid\"        \"enabled\"      \"geom\" names(upstream_nwis) #> [1] \"origin\"      \"UT_nwissite\" names(basin) #> [1] \"geometry\" class(st_geometry(flowline)) #> [1] \"sfc_LINESTRING\" \"sfc\" class(st_geometry(upstream_nwis$UT_nwissite)) #> [1] \"sfc_POINT\" \"sfc\" class(st_geometry(basin)) #> [1] \"sfc_POLYGON\" \"sfc\""},{"path":"/articles/plot_nhdplus.html","id":"bounding-boxes","dir":"Articles","previous_headings":"","what":"Bounding Boxes","title":"Plotting with nhdplusTools","text":"First, side note bounding boxes. ongoing transition sp package sf package, stumbling blocks. Bounding boxes one . shown , sf bbox format named vector class “bbox”. sp bbox format matrix named dimensions. Many packages expect sp format. ggmap package expects yet another bbox format, much like sf different names.","code":"library(sp)  sf_bbox <- st_bbox(basin) sf_bbox #>      xmin      ymin      xmax      ymax  #> -89.60465  43.03507 -89.20378  43.36607 class(sf_bbox) #> [1] \"bbox\"  sp_bbox <- sp::bbox(sf::as_Spatial(basin)) sp_bbox #>         min       max #> x -89.60465 -89.20378 #> y  43.03507  43.36607 class(sp_bbox) #> [1] \"matrix\" \"array\"  # Or without the sp::bbox sp_bbox <- matrix(sf_bbox,                    byrow = FALSE,                    ncol = 2,                    dimnames = list(c(\"x\", \"y\"),                                    c(\"min\", \"max\"))) sp_bbox #>         min       max #> x -89.60465 -89.20378 #> y  43.03507  43.36607  ggmap_bbox <- setNames(sf_bbox, c(\"left\", \"bottom\", \"right\", \"top\")) ggmap_bbox #>      left    bottom     right       top  #> -89.60465  43.03507 -89.20378  43.36607"},{"path":"/articles/plot_nhdplus.html","id":"base-r-plotting","dir":"Articles","previous_headings":"","what":"Base R Plotting","title":"Plotting with nhdplusTools","text":"order maximize flexibility make sure understand ’s going coordinate reference systems, demonstration shows use base R plotting package prettymappr rosm. example, plot just geometry, extracted st_geometry need project geometry plotting coordinate reference system, EPSG:3857 also known “web mercator”. reason make transformation practically basemap tiles projection reprojection pre-rendered tiles doesn’t look good. simple prep_layer function. prettymapr::prettymap() function isn’t strictly necessary, gives us nice margins, scale bar, north arrow. rosm::osm.plot base plot commands put data onto R plotting device first plotted bottom. couple hints . lwd line width. pch point style. cex expansion factor. Colors shown basic R colors. rgb function handy creating colors transparency ’s interest.","code":"prep_layer <- function(x) st_geometry(st_transform(x, 3857))  prettymapr::prettymap({   rosm::osm.plot(sp_bbox, type = \"cartolight\", quiet = TRUE,                   progress = \"none\", cachedir = work_dir)      plot(prep_layer(basin),         lwd = 2, add = TRUE)      plot(prep_layer(flowline),         lwd = 1.5, col = \"deepskyblue\", add = TRUE)      plot(prep_layer(dplyr::filter(flowline, streamorde > 2)),         lwd = 3, col = \"darkblue\", add = TRUE)      us_nwis_layer <- prep_layer(upstream_nwis)      plot(us_nwis_layer,         pch = 17, cex = 1.5, col = \"yellow\", add = TRUE)      label_pos <- st_coordinates(us_nwis_layer)      text(label_pos[,1],label_pos[,2],         upstream_nwis$identifier,         adj = c(-0.2, 0.5), cex = 0.7)    }, drawarrow = TRUE) #> Zoom: 10 #> Map tiles by Carto, under CC BY 3.0. Data by OpenStreetMap, under ODbL. #> Error occured while plotting:  Error in UseMethod(\"st_transform\"): no applicable method for 'st_transform' applied to an object of class \"list\""},{"path":"/articles/plot_nhdplus.html","id":"plotting-with-ggplot2","dir":"Articles","previous_headings":"","what":"Plotting with ggplot2","title":"Plotting with nhdplusTools","text":"similar example using ggmap ggplot2 geom_sf. Note ggmap takes case projections us, either make happy just works nervous just works.   Hopefully examples give good head start plotting NHDPlus data. Please submit questions via github issues !! Pull requests vignette welcome additions suggestions.","code":"library(ggmap) library(ggplot2)  upstream_nwis <- dplyr::bind_cols(upstream_nwis$UT_nwissite,                            dplyr::rename(dplyr::as_tibble(sf::st_coordinates(upstream_nwis$UT_nwissite)),                                           lat = Y, lon = X))  basemap_toner <- get_map(source = \"stamen\", maptype = \"toner\",                           location = ggmap_bbox, zoom = 11, messaging = FALSE) basemap_terrain <- get_map(source = \"stamen\", maptype = \"terrain-lines\",                             location = ggmap_bbox, zoom = 11, messaging = FALSE) toner_map <- ggmap(basemap_toner) terrain_map <- ggmap(basemap_terrain)  toner_map terrain_map + geom_sf(data = basin,                         inherit.aes = FALSE,                         color = \"black\", fill = NA) +    geom_sf(data = flowline,           inherit.aes = FALSE,           color = \"deepskyblue\") +   geom_sf(data = dplyr::filter(flowline, streamorde > 2),           inherit.aes = FALSE,           color = \"darkblue\") +   geom_sf(data = upstream_nwis, inherit.aes = FALSE, color = \"red\") +    geom_text(data = upstream_nwis, aes(label = identifier, x = lon, y = lat),             hjust = 0, size=2.5, nudge_x = 0.02, col = \"black\")"},{"path":"/articles/point_indexing.html","id":"nhdplus-flowline-indexing","dir":"Articles","previous_headings":"","what":"NHDPlus Flowline Indexing","title":"Indexing and Referencing","text":"First ’ll load data. case, use flowlines NHDPlus subset ’s included package set points index. ’ll use NHDPlus Gages layer example. data example big. R session needs lot memory hold whole NHDPlus flowline layer run calculations. Now can call nhdplusTools::get_flowline_index() data just loaded. Note spatial searching units degrees. get_flowline_index input, search_radius defaults 0.1. See documentation nn2 function RANN package information search works. NOTE: small area need flowline indexes, get_flowline_index() option download flowlines bounding box input points.  Now let’s look results see nhdplusTools::get_flowline_index() . shows percent COMIDs REACHCODEs match shows histogram measure differences REACHCODEs matched.","code":"library(nhdplusTools)  nhdplus_path(file.path(work_dir, \"natseamless.gpkg\"))  flowlines <- sf::read_sf(nhdplus_path(), \"NHDFlowline_Network\") gages <- sf::read_sf(nhdplus_path(), \"Gage\") indexes <- get_flowline_index(flowlines,                               sf::st_geometry(gages),                                search_radius = 0.01,                                max_matches = 1)  indexes <- left_join(sf::st_sf(id = c(1:nrow(gages)),                                 geom = sf::st_geometry(gages)),                       indexes, by = \"id\")  plot(sf::st_geometry(sf::st_zm(flowlines))) plot(sf::st_geometry(indexes), add = TRUE) p_match <- 100 * length(which(indexes$COMID %in% gages$FLComID)) / nrow(gages) paste0(round(p_match, digits = 1),         \"% were found to match the COMID in the NHDPlus gages layer\") #> [1] \"63% were found to match the COMID in the NHDPlus gages layer\"  p_match <- 100 * length(which(indexes$REACHCODE %in% gages$REACHCODE)) / nrow(gages) paste0(round(p_match, digits = 1),         \"% were found to match the REACHCODE in the NHDPlus gages layer\") #> [1] \"65.2% were found to match the REACHCODE in the NHDPlus gages layer\"  matched <- cbind(indexes,                   dplyr::select(sf::st_drop_geometry(gages),                                 REACHCODE_ref = REACHCODE,                                 COMID_ref = FLComID,                                 REACH_meas_ref = Measure)) %>%   dplyr::filter(REACHCODE == REACHCODE_ref) %>%   dplyr::mutate(REACH_meas_diff = REACH_meas - REACH_meas_ref)  hist(matched$REACH_meas_diff, breaks = 100,       main = \"Difference in measure for gages matched to the same reach.\") round(quantile(matched$REACH_meas_diff,                 probs = c(0, 0.1, 0.25, 0.5, 0.75, 0.9, 1)),        digits = 2) #>    0%   10%   25%   50%   75%   90%  100%  #> -5.11 -1.40 -0.52  0.36  1.57  8.11 30.74"},{"path":"/articles/point_indexing.html","id":"flowline-indexing-with-higher-precision","dir":"Articles","previous_headings":"","what":"Flowline Indexing with higher precision","title":"Indexing and Referencing","text":"example used native nodes NHDPlus potential measure snap locations. nhdplusTools::get_flowline_index() function ability refine segmentizing line given resolution. Let’s try thing using resolution 10m see can better. Note sf::st_segmentize function takes care distance conversion segmentizes lon/lat lines 10m fly. Now lets look comparison .","code":"indexes <- get_flowline_index(flowlines,                                sf::st_geometry(gages),                                search_radius = 0.1,                                precision = 10) #> Linking to GEOS 3.9.0, GDAL 3.2.1, PROJ 7.2.1  indexes <- left_join(data.frame(id = seq_len(nrow(gages))), indexes, by = \"id\") p_match <- 100 * length(which(indexes$COMID %in% gages$FLComID)) / nrow(gages) paste0(round(p_match, digits = 1),         \"% were found to match the COMID in the NHDPlus gages layer\") #> [1] \"69.6% were found to match the COMID in the NHDPlus gages layer\"  p_match <- 100 * length(which(indexes$REACHCODE %in% gages$REACHCODE)) / nrow(gages) paste0(round(p_match, digits = 1),         \"% were found to match the REACHCODE in the NHDPlus gages layer\") #> [1] \"71.7% were found to match the REACHCODE in the NHDPlus gages layer\"  matched <- cbind(indexes,                   dplyr::select(sf::st_set_geometry(gages, NULL),                                 REACHCODE_ref = REACHCODE,                                 COMID_ref = FLComID,                                 REACH_meas_ref = Measure)) %>%   dplyr::filter(REACHCODE == REACHCODE_ref) %>%   dplyr::mutate(REACH_meas_diff = REACH_meas - REACH_meas_ref)  hist(matched$REACH_meas_diff, breaks = 100,       main = \"Difference in measure for gages matched to the same reach.\") round(quantile(matched$REACH_meas_diff,                 probs = c(0, 0.1, 0.25, 0.5, 0.75, 0.9, 1)), digits = 2) #>    0%   10%   25%   50%   75%   90%  100%  #> -1.31 -0.66 -0.33 -0.04  0.22  0.81  1.57"},{"path":"/articles/point_indexing.html","id":"finding-multiple-indexes","dir":"Articles","previous_headings":"","what":"Finding multiple indexes","title":"Indexing and Referencing","text":"get_flowline_index() parameter max_matches controls many indexed flowlines returned per point. useful points near many flowlines disambiguation needed determine exactly flowline point indexed . time writing, functionality included nhdplusTools planned. example, ’ll just look one point.","code":"indexes <- get_flowline_index(flowlines,                               sf::st_geometry(gages)[42],                                search_radius = 0.01,                                max_matches = 10)  indexes <- left_join(sf::st_sf(id = 1,                                 geom = sf::st_geometry(gages)[42]),                       indexes, by = \"id\")  plot(sf::st_geometry(sf::st_buffer(indexes, 0.005)), border = NA) plot(sf::st_geometry(indexes), add = TRUE) plot(sf::st_geometry(sf::st_zm(flowlines)), col = \"blue\", add = TRUE) indexes #> Simple feature collection with 10 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -89.35278 ymin: 43.20867 xmax: -89.35278 ymax: 43.20867 #> Geodetic CRS:  GRS 1980(IUGG, 1980) #>    id    COMID      REACHCODE               REACH_meas       offset #> 1   1 13293452 07090002007737   0.00000000000000000000 0.0004868953 #> 2   1 13293456 07090002007738 100.00000000000000000000 0.0004868953 #> 3   1 13293432 07090002007736 100.00000000000000000000 0.0004868953 #> 4   1 13293430 07090002007639  -0.00000000000001421085 0.0008846702 #> 5   1 13293454 07090002007638 100.00000000000000000000 0.0008846702 #> 6   1 13294394 07090002007637 100.00000000000000000000 0.0049572540 #> 7   1 13294128 07090002007636 100.00000000000000000000 0.0052999159 #> 8   1 13294382 07090002007725   0.00000000000000000000 0.0052999159 #> 9   1 13294274 07090002007725   3.63134999999999985576 0.0065388475 #> 10  1 13293458 07090002007725  12.51731999999999978002 0.0099172984 #>                          geom #> 1  POINT (-89.35278 43.20867) #> 2  POINT (-89.35278 43.20867) #> 3  POINT (-89.35278 43.20867) #> 4  POINT (-89.35278 43.20867) #> 5  POINT (-89.35278 43.20867) #> 6  POINT (-89.35278 43.20867) #> 7  POINT (-89.35278 43.20867) #> 8  POINT (-89.35278 43.20867) #> 9  POINT (-89.35278 43.20867) #> 10 POINT (-89.35278 43.20867)"},{"path":"/articles/point_indexing.html","id":"waterbody-indexing","dir":"Articles","previous_headings":"","what":"Waterbody Indexing","title":"Indexing and Referencing","text":"get_flowline_index() function estimates hydrographic address linear reference flowline. points near bodies water, inappropriate kind index. flowlines run waterbody. “artificial paths” represent waterbody. get_waterbody_index() function intended address points near shore waterbody. next block code loads NHDPlus Waterbody layer creates interactive map. interest gages near short bodies water far away flowlines. Note drop NHDPlus geometry use source LonSite LatSite attributes geometry.  next block shows call get_flowline_index() get_waterbody_index() output looks like.","code":"waterbody <- sf::read_sf(nhdplus_path(), \"NHDWaterbody\")  gages <- sf::st_drop_geometry(gages) %>%   dplyr::filter(!is.na(LonSite)) %>%   sf::st_as_sf(coords = c(\"LonSite\", \"LatSite\"), crs = 4326)  plot(sf::st_geometry(sf::st_zm(flowlines))) plot(sf::st_geometry(waterbody), add = TRUE) plot(sf::st_geometry(gages), add = TRUE) flowline_indexes <- left_join(data.frame(id = seq_len(nrow(gages))),                               get_flowline_index(                                 sf::st_transform(flowlines, 5070),                                  sf::st_geometry(sf::st_transform(gages, 5070)),                                  search_radius = 200), by = \"id\")                                indexed_gages <- cbind(dplyr::select(gages,                                        orig_REACHCODE = REACHCODE,                                        orig_Measure = Measure,                                        FLComID,                                        STATION_NM),                          flowline_indexes,                         get_waterbody_index(                           st_transform(waterbody, 5070),                            st_transform(gages, 5070),                            st_drop_geometry(flowlines),                            search_radius = 200))  plot(sf::st_geometry(sf::st_zm(flowlines))) plot(sf::st_geometry(waterbody), add = TRUE) plot(sf::st_geometry(indexed_gages), add = TRUE) dplyr::select(sf::st_drop_geometry(indexed_gages), near_wb_COMID, near_wb_dist, in_wb_COMID, outlet_fline_COMID) #>    near_wb_COMID near_wb_dist in_wb_COMID outlet_fline_COMID #> 1             NA           NA          NA                 NA #> 2       13293226    11.013063          NA           13294384 #> 3             NA           NA          NA                 NA #> 4      167120949    16.862351          NA           13294360 #> 5             NA           NA          NA                 NA #> 6             NA           NA          NA                 NA #> 7       13293262    22.640184          NA           13294312 #> 8             NA           NA          NA                 NA #> 9       13296360    50.380329          NA           13297172 #> 10            NA           NA          NA                 NA #> 11            NA           NA          NA                 NA #> 12      13293262    64.925912          NA           13294312 #> 13      13293262   164.160184          NA           13294312 #> 14     167120949    39.327388          NA           13294360 #> 15            NA           NA          NA                 NA #> 16            NA           NA          NA                 NA #> 17            NA           NA          NA                 NA #> 18      13293284    57.456159    13293284                 NA #> 19      13293262    33.292260          NA           13294312 #> 20            NA           NA          NA                 NA #> 21            NA           NA          NA                 NA #> 22            NA           NA          NA                 NA #> 23      13293226   181.370856          NA           13294384 #> 24            NA           NA          NA                 NA #> 25      14711422    22.566279          NA                 NA #> 26            NA           NA          NA                 NA #> 27            NA           NA          NA                 NA #> 28            NA           NA          NA                 NA #> 29            NA           NA          NA                 NA #> 30            NA           NA          NA                 NA #> 31            NA           NA          NA                 NA #> 32            NA           NA          NA                 NA #> 33            NA           NA          NA                 NA #> 34            NA           NA          NA                 NA #> 35            NA           NA          NA                 NA #> 36      13293316    37.633591    13293316           13294374 #> 37            NA           NA          NA                 NA #> 38            NA           NA          NA                 NA #> 39      13293322     6.737635          NA           13294344 #> 40            NA           NA          NA                 NA #> 41            NA           NA          NA                 NA #> 42      13293322     3.914543          NA           13294344 #> 43            NA           NA          NA                 NA #> 44      13293322     6.737635          NA           13294344 #> 45      13293262    50.163000          NA           13294312"},{"path":"/DISCLAIMER.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Disclaimer","text":"information preliminary provisional subject revision. provided meet need timely best science. information received final approval U.S. Geological Survey (USGS) provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use information. software public domain contains materials originally came U.S. Geological Survey (USGS), agency United States Department Interior. information, see official USGS copyright policy https://www.usgs.gov/information-policies--instructions/copyrights--credits Although software program used USGS, warranty, expressed implied, made USGS U.S. Government accuracy functioning program related program material shall fact distribution constitute warranty, responsibility assumed USGS connection therewith. software provided “.”","code":""},{"path":"/index.html","id":"nhdplustools-tools-for-accessing-and-working-with-the-nhdplus","dir":"","previous_headings":"","what":"nhdplusTools: Tools for Accessing and Working with the NHDPlus","title":"NHDPlus Tools","text":"package growing set tools manipulation hydrographic data using NHDPlus data model. specific funding plan continue development package long term ongoing support available due use package project work.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"nhdplusTools: Tools for Accessing and Working with the NHDPlus","what":"Installation:","title":"NHDPlus Tools","text":"latest development:","code":"install.packages(\"nhdplusTools\") install.packages(\"devtools\") devtools::install_github(\"USGS-R/nhdplusTools\")"},{"path":"/index.html","id":"resources","dir":"","previous_headings":"nhdplusTools: Tools for Accessing and Working with the NHDPlus","what":"Resources","title":"NHDPlus Tools","text":"See “Get Started” vignette showing gneral workflow functionality nhdplusTools. See set slides illustrating use nhdplusTools USGS-R packages.","code":""},{"path":"/index.html","id":"terminology","dir":"","previous_headings":"nhdplusTools: Tools for Accessing and Working with the NHDPlus","what":"Terminology:","title":"NHDPlus Tools","text":"following definitions used much possible throughout package. Terms rivers:Flowline: NHD name hydrographic representation flowing body water. Flowline generally used referring geometry.Flowpath: HY_Features name hydrologic feature primary path water follows catchment; either headwater outlet inlet outlet. Flowpath used describing aspects abstract flowpath featuretype, generally relation flowpath’s relationship catchment. Terms used hydrologic units:Catchment: abstract unit hydrology HY_Features catchment. physiographic unit zero one inlets one outlet. inherently conceptual realizations. Rather, given catchment can realized number ways; flowpath, divide, networks flowpaths divides primary realizations.Catchment divide: NHD “catchment” polygons accurately described “catchment divide” features. overlap HY_Features abstract “catchment” feature type, “catchment divide” used polygon representations catchments.","code":""},{"path":"/index.html","id":"data","dir":"","previous_headings":"nhdplusTools: Tools for Accessing and Working with the NHDPlus","what":"Data:","title":"NHDPlus Tools","text":"National Dataset NHDPlusV2.1 available . Also see: get_nhdplus, subset_nhdplus, download_nhdplushr get_nhdplushr","code":""},{"path":"/index.html","id":"package-vision","dir":"","previous_headings":"","what":"Package Vision","title":"NHDPlus Tools","text":"nhdplusTools package intended provide reusable set tools subset relate data NHDPlus data. implements data model consistent NHDPlus HY_Features. package aims provide set tools minimal dependencies can used build workflows using NHDPlus data. vision intended guide contributors – conveying kinds contributions interest package’s long term vision. reflection current thinking open discussion modification.","code":""},{"path":"/index.html","id":"functional-vision","dir":"","previous_headings":"Package Vision","what":"Functional Vision","title":"NHDPlus Tools","text":"following describe vision functionality included package long run.","code":""},{"path":"/index.html","id":"subsetting","dir":"","previous_headings":"Package Vision > Functional Vision","what":"Subsetting","title":"NHDPlus Tools","text":"NHDPlus large dataset spatially terms number attributes contains. Subsetting utilities provide network location discovery, network navigation, data export utilities generate spatial attribute subsets NHDPlus dataset.","code":""},{"path":"/index.html","id":"indexing","dir":"","previous_headings":"Package Vision > Functional Vision","what":"Indexing","title":"NHDPlus Tools","text":"One important roles NHDPlus connecting network ancillary data models. first step workflow uses network like indexing relevant data network. number methods indexing exist, can broken two main categories: linear referencing catchment indexing. operate features represented points, lines, polygons. nhdplusTools eventually support linear catchment indexing.","code":""},{"path":"/index.html","id":"data-model","dir":"","previous_headings":"Package Vision","what":"Data Model","title":"NHDPlus Tools","text":"Given nhdplusTools focused working NHDPlus data, NHDPlus data model largely govern data model package designed work . said, much package functionality also uses concepts HY_Features standard. Note: HY_Features standard based notion “catchment” holistic feature can “realized” (might say modeled) number ways. words, catchment can characterized fully collection different conceptual representations. NHDPlus, “catchment” feature polygon feature describes drainage divide around hydrologic unit contributes surface flow given NHD flowline. may seem like significant difference, reality, NHDPlus COMID identifier lends well HY_Features catchment concept. COMID used identifier catchment polygon, flowline connects catchment inlet outlet, value added attributes describe characteristics catchment’s interior. way, COMID identifier actually identifier collection data together fully describe NHDPlus catchment. See NHDPlus mapping HY_Features HY_Features specification. description expected scope data used nhdplusTools package. data attributes may come scope, done naive pass-, data subsetting, considerable deliberation.","code":""},{"path":"/index.html","id":"flowlines-and-waterbodies","dir":"","previous_headings":"Package Vision > Data Model","what":"Flowlines and Waterbodies","title":"NHDPlus Tools","text":"Flowline geometry mix 1-d streams 1-d “artificial paths”. order complete set features meant represent water, need include waterbody potentially NHDArea polygons (double line stream overlays).","code":""},{"path":"/index.html","id":"catchment-polygons","dir":"","previous_headings":"Package Vision > Data Model","what":"Catchment Polygons","title":"NHDPlus Tools","text":"Catchment polygons result complete elevation derived hydrography process hydro-enforcement applied Watershed Boundary Dataset Hydrologic Units NHD reaches.","code":""},{"path":"/index.html","id":"network-attributes","dir":"","previous_headings":"Package Vision > Data Model","what":"Network Attributes","title":"NHDPlus Tools","text":"NHDPlus includes numerous attributes built using network allow wide array capabilities require excessive iteration sophisticated complex graph-oriented data structures algorithms.","code":""},{"path":"/index.html","id":"architecture","dir":"","previous_headings":"Package Vision","what":"Architecture","title":"NHDPlus Tools","text":"NHDPlus large dataset. architecture package relates handling data dependencies used important.","code":""},{"path":"/index.html","id":"web-vs-local-data","dir":"","previous_headings":"Package Vision > Architecture","what":"Web vs Local Data","title":"NHDPlus Tools","text":"Web services generally avoided. However, applications require loading significant amounts data perform something can accomplished web service quickly considered. Systems like Network Linked Data Index used data discovery.","code":""},{"path":"/index.html","id":"nhdplus-version","dir":"","previous_headings":"Package Vision > Architecture","what":"NHDPlus Version","title":"NHDPlus Tools","text":"Initial package development focused National Seamless NHDPlus database. NHDPlus High Resolution also supported.","code":""},{"path":"/index.html","id":"related-similar-packages","dir":"","previous_headings":"Package Vision","what":"Related similar packages:","title":"NHDPlus Tools","text":"https://github.com/mbtyers/riverdisthttps://github.com/jsta/nhdRhttps://github.com/lawinslow/hydrolinkshttps://github.com/mikejohnson51/HydroDatahttps://github.com/ropensci/FedDatahttps://github.com/cheginit/hydrodata … others – please suggest additions?","code":""},{"path":"/index.html","id":"build-notes","dir":"","previous_headings":"Package Vision","what":"Build notes:","title":"NHDPlus Tools","text":"package uses convention avoid building vignettes CRAN. BUILD_VIGNETTES environment variable must set TRUE. done .Renviron file package directory line BUILD_VIGNETTES=TRUE. Given , package built locally include vignettes using:","code":"devtools::build()"},{"path":"/index.html","id":"check-notes","dir":"","previous_headings":"Package Vision","what":"Check notes:","title":"NHDPlus Tools","text":"addition typical R package checking, Dockerfile included repository. built, can run following command.","code":"docker build -t nhdplustools_test .  docker run --rm -it -v %cd%:/src nhdplustools_test /bin/bash -c \"cp -r /src/* /check/ && cp /src/.Rbuildignore /check/ && cd /check && Rscript -e 'devtools::build()' && R CMD check --as-cran ../nhdplusTools_*\""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"Package Vision","what":"Contributing:","title":"NHDPlus Tools","text":"First, thanks considering contribution! hope make package community created resource us gain won’t able without help! Contributions thoroughly tested testthat. Code style attempt follow tidyverse style guide. Please attempt describe want prior contributing submitting issue. Please follow typical github fork - pull-request workflow. Make sure use roxygen run Check contributing. front package matures. notes: - consider running lintr prior contributing. - consider running goodpractice::gp() package contributing. - consider running devtools::spell_check() wrote documentation. - package may end using pkgdown running pkgdown::build_site() refresh .","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"NHDPlus Tools","text":"information preliminary provisional subject revision. provided meet need timely best science. information received final approval U.S. Geological Survey (USGS) provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use information. software public domain contains materials originally came U.S. Geological Survey (USGS), agency United States Department Interior. information, see official USGS copyright policy https://www.usgs.gov/information-policies--instructions/copyrights--credits Although software program used USGS, warranty, expressed implied, made USGS U.S. Government accuracy functioning program related program material shall fact distribution constitute warranty, responsibility assumed USGS connection therewith. software provided “.”","code":""},{"path":"/news/index.html","id":"nhdplustools-042","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.4.2 2021-06-23","title":"nhdplusTools 0.4.2 2021-06-23","text":"Version 0.4.2 cleans temporary cache data functionality CRAN policy. New functionality added indexing functionality. multiple flowlines returned, disambiguate_flowline_indexes() supports disambiguating based numeric text attributes match. functionality heavily tested, forms basis expansion functionality going forward. function find point location flowline index, get_hydro_location() added. return point geometry given geometry identifier measure along identifier.","code":""},{"path":"/news/index.html","id":"nhdplustools-041","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.4.1 2021-05-16","title":"nhdplusTools 0.4.1 2021-05-16","text":"Version 0.4.1 minor release bug fixes updates CRAN policy. noteable addition handling strictly dendritic topology encoded using “tocomid” attribute rather “fromnode” “tonode” attributes. functionality added subsetting functions backward compatible previous versions.","code":""},{"path":"/news/index.html","id":"nhdplustools-040","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.4.0 2021-04-02","title":"nhdplusTools 0.4.0 2021-04-02","text":"Version 0.4.0 adds new functionality data access via web services updates usability flexibility data discovery subsetting functions. release includes significant rework functions related network navigation web-service data subsetting. Previsouly, subset_nhdplus() included internal functionality downloading data via web service. code subsetting NHDPlus via web service completely rewritten number new web-service data access functions added. get_nhdplus() function added web-service data access . subset_nhdplus(), output subset local .gpkg file, now uses get_nhdplus() download functionality. navigate_nldi() NLDI functions now based NLDI client dataRetrieval package. Functionality maintained backward compatible nhdplusTools v0.3 much possible minor modifications accomadate changes dataRetrieval. response format navigate_nldi() changed slightly v0.4, now includes origin feature navigation type(s) list. Two un-needed nldi discovery functions removed. Functions download cache NHDPlus VAAs (195mb .fst file) use network navigation applications added. can used nhdplusTools functions require geometry. get_levelpaths() now override_factor parameter cause stream leveling follow weight rather name input weight override_factor times larger name indication. Functions Added * get_nhdplus() * get_nhdarea() * get_waterbodies() * get_gagesII() * get_huc12() * get_huc8() * download_vaa() * get_vaa() * get_vaa_names() * get_vaa_path() Functions Removed * discover_nldi_navigation() * discover_nldi_sources() Functions Deprecated * stage_national_data() Functions Consolodated Internals * discover_nhdplus_id() * get_nldi_basin() * get_nldi_feature() * subset_nhdplus() * plot_nhdplus() Finally, handling data caching package overhauled. changes non-functional, aim decrease data downloads caching rather using temp directories.","code":""},{"path":"/news/index.html","id":"nhdplustools-0316","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.16 2020-11-13","title":"nhdplusTools 0.3.16 2020-11-13","text":"subset_nhdplus() now validates geometry ensures outputs NAD83 subset_nhdplus() queries NHDPlus database rather loading filtering get_levelpaths() rewritten performance. Package now uses data.table.","code":""},{"path":"/news/index.html","id":"nhdplustools-0315","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.15 2020-09-15","title":"nhdplusTools 0.3.15 2020-09-15","text":"Added discover_nldi_characteristics() get_nldi_characteristics() Changed navigate_nldi() use new NLDI navigation end point. Distance now required. Fixed bug get_flowline_index() handle multipart lines. Added flowline_only input plot_nhdplus() improve scalability Added streamorder filtering subset_nhdplus() download filtering. Default behavior plot_nhdplus() updated improve scalability large downloads.","code":""},{"path":"/news/index.html","id":"nhdplustools-0314","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.14 2020-08-03","title":"nhdplusTools 0.3.14 2020-08-03","text":"Added get_node() get top bottom flowline. Switched geospatial data dependency use labs.waterdata.usgs.gov Added subset_rpu() enable subsetting NHD Raster Processing Unit Added get_waterbody_index() find associations point locations waterbodys. Added ability get multiple matches get_flowline_index() max_matches parameter. Added ability download flowlines get_flowline_index() rather requiring data loaded locally.","code":""},{"path":"/news/index.html","id":"nhdplustools-0313","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.13 2020-04-01","title":"nhdplusTools 0.3.13 2020-04-01","text":"tested dplyr 1.0 sf 0.9.","code":""},{"path":"/news/index.html","id":"nhdplustools-0312","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.12 2020-01-11","title":"nhdplusTools 0.3.12 2020-01-11","text":"Added plot_nhdplus() outlet-based bbox based data subsetting well rudimentary style modification capabilities. Implemented stream order Pfafstetter code generators (get_streamorder() get_pfaf()) dendritic networks. subset_nhdplus() can now return data without writing file disk. NLDI feature specification flexible, doesn’t require names anymore. get_nhdplushr() updated modify terminal path identifiers making nhdplusHR subsets “stand alone”. function make_standalone() now exported. Added get_terminal() get_pathlength() functions generate nhdplus network attributes.","code":""},{"path":"/news/index.html","id":"nhdplustools-0311","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.11 2019-11-07","title":"nhdplusTools 0.3.11 2019-11-07","text":"Updated link NHDPlusHR data Empty tibble rather NULL response empty NLDI result Slides AWRA National 2019, link README","code":""},{"path":"/news/index.html","id":"nhdplustools-0310","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.10 2019-10-17","title":"nhdplusTools 0.3.10 2019-10-17","text":"Added name alignment function Added ability sort response network navigation","code":""},{"path":"/news/index.html","id":"nhdplustools-039","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.9 2019-10-16","title":"nhdplusTools 0.3.9 2019-10-16","text":"Added downloader functions hydrography datasets Change navigations exclude requested catchment","code":""},{"path":"/news/index.html","id":"nhdplustools-038","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.8 2019-08-27","title":"nhdplusTools 0.3.8 2019-08-27","text":"Modified vignettes examples avoid web-service calls breaking CRAN build. Added error handling web service requests. Added CITATION NEWS.","code":""},{"path":"/news/index.html","id":"nhdplustools-037","dir":"Changelog","previous_headings":"","what":"nhdplusTools 0.3.7 2019-08-25","title":"nhdplusTools 0.3.7 2019-08-25","text":"First CRAN release!","code":""}]
